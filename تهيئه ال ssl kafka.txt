فهمت! سأشرح الفرق بين **KeyStore** و **TrustStore** مع أمثلة عملية ملموسة، وسأعطيك أسماء شهادات مختلفة لتمييزها بوضوح. لنبدأ:

---

### **1. الفرق الأساسي: KeyStore vs TrustStore**

| الميزة                  | KeyStore                                   | TrustStore                                  |
|-------------------------|--------------------------------------------|---------------------------------------------|
| **المحتوى**             | - شهادتك أنت (Client/Server Certificate) <br> - المفتاح الخاص (Private Key) | - شهادات CA (الجهات المصدِّرة الموثوقة) <br> - شهادات الخوادم/العملاء الآخرين |
| **الغرض**               | لإثبات هويتك للآخرين (مثل جواز السفر)       | للتحقق من هوية الآخرين (مثل قائمة الدول التي تثق بجوازات سفرها) |
| **متى يُستخدم**         | عند إرسال شهادتك للطرف الآخر                | عند استقبال شهادة من الطرف الآخر والتحقق منها |

---

### **2. مثال عملي مع أسماء شهادات مميزة**

لنفترض أن لديك:
- **عميل (Client)** على Windows.
- **وسيط (Broker)** على WSL.
- **CA** تسمى `My-Company-CA`.

#### أ. **الخطوات والملفات:**

| الدور         | KeyStore                            | TrustStore                          | أسماء الشهادات (Aliases)       |
|---------------|-------------------------------------|-------------------------------------|--------------------------------|
| **العميل**    | `client-keystore.jks`               | `client-truststore.jks`            | - `my-client-cert` (في KeyStore) <br> - `trusted-broker-ca` (في TrustStore) |
| **الوسيط**    | `broker-keystore.jks`               | `broker-truststore.jks`            | - `my-broker-cert` (في KeyStore) <br> - `trusted-client-ca` (في TrustStore) |

---

### **3. كيف تنشئ هذه الملفات؟**

#### أ. **إنشاء شهادة CA (الجهة المصدِّرة)**  
الاسم: **`My-Company-CA`**  
```bash
# إنشاء شهادة CA
openssl req -new -x509 -keyout ca.key -out ca.crt -days 365 -subj "/CN=My-Company-CA"
```

#### ب. **إنشاء KeyStore و TrustStore للعميل**  
- **KeyStore العميل**:  
  - اسم الشهادة (Alias): **`my-client-cert`**  
  ```bash
  # 1. إنشاء KeyStore للعميل
  keytool -genkeypair -alias my-client-cert -keyalg RSA -keystore client-keystore.jks -storepass 123456 -dname "CN=Client-1"

  # 2. تصدير طلب توقيع (CSR) للشهادة
  keytool -certreq -alias my-client-cert -keystore client-keystore.jks -file client.csr -storepass 123456

  # 3. توقيع الطلب باستخدام CA
  openssl x509 -req -CA ca.crt -CAkey ca.key -in client.csr -out client.crt -days 365 -CAcreateserial

  # 4. إضافة شهادة CA إلى KeyStore العميل
  keytool -import -alias trusted-broker-ca -file ca.crt -keystore client-keystore.jks -storepass 123456 -noprompt

  # 5. إضافة الشهادة الموقَّعة إلى KeyStore العميل
  keytool -import -alias my-client-cert -file client.crt -keystore client-keystore.jks -storepass 123456
  ```

- **TrustStore العميل**:  
  - اسم الشهادة (Alias): **`trusted-broker-ca`**  
  ```bash
  # إنشاء TrustStore وإضافة شهادة CA
  keytool -import -alias trusted-broker-ca -file ca.crt -keystore client-truststore.jks -storepass 123456
  ```

#### ج. **إنشاء KeyStore و TrustStore للوسيط**  
- **KeyStore الوسيط**:  
  - اسم الشهادة (Alias): **`my-broker-cert`**  
  ```bash
  # 1. إنشاء KeyStore للوسيط
  keytool -genkeypair -alias my-broker-cert -keyalg RSA -keystore broker-keystore.jks -storepass 123456 -dname "CN=Broker-1"

  # 2. تصدير طلب توقيع (CSR) للشهادة
  keytool -certreq -alias my-broker-cert -keystore broker-keystore.jks -file broker.csr -storepass 123456

  # 3. توقيع الطلب باستخدام CA
  openssl x509 -req -CA ca.crt -CAkey ca.key -in broker.csr -out broker.crt -days 365 -CAcreateserial

  # 4. إضافة شهادة CA إلى KeyStore الوسيط
  keytool -import -alias trusted-client-ca -file ca.crt -keystore broker-keystore.jks -storepass 123456 -noprompt

  # 5. إضافة الشهادة الموقَّعة إلى KeyStore الوسيط
  keytool -import -alias my-broker-cert -file broker.crt -keystore broker-keystore.jks -storepass 123456
  ```

- **TrustStore الوسيط**:  
  - اسم الشهادة (Alias): **`trusted-client-ca`**  
  ```bash
  # إنشاء TrustStore وإضافة شهادة CA
  keytool -import -alias trusted-client-ca -file ca.crt -keystore broker-truststore.jks -storepass 123456
  ```

---

### **4. كيف تستخدم هذه الملفات؟**

#### أ. **تكوين العميل (Windows)**  
في ملف `client.properties`:  
```properties
ssl.keystore.location=C:\kafka\client-keystore.jks
ssl.keystore.password=123456
ssl.key.password=123456
ssl.truststore.location=C:\kafka\client-truststore.jks
ssl.truststore.password=123456
```

#### ب. **تكوين الوسيط (WSL)**  
في ملف `server.properties`:  
```properties
ssl.keystore.location=/etc/kafka/broker-keystore.jks
ssl.keystore.password=123456
ssl.key.password=123456
ssl.truststore.location=/etc/kafka/broker-truststore.jks
ssl.truststore.password=123456
ssl.client.auth=required  # إذا أردت مصادقة العميل
```

---

### **5. ماذا يحدث عند الاتصال؟**

1. **العميل → الوسيط**:  
   - العميل يرسل شهادته (`my-client-cert`) من `client-keystore.jks`.  
   - الوسيط يتحقق منها باستخدام `trusted-client-ca` في `broker-truststore.jks`.

2. **الوسيط → العميل**:  
   - الوسيط يرسل شهادته (`my-broker-cert`) من `broker-keystore.jks`.  
   - العميل يتحقق منها باستخدام `trusted-broker-ca` في `client-truststore.jks`.

---

### **6. نصائح لتجنب الالتباس**

- **استخدم أسماء مميزة (Aliases)**:  
  - مثال: `my-client-cert` للعميل، `my-broker-cert` للوسيط.  
  - تجنب أسماء عامة مثل `alias` أو `cert`.

- **فصل الملفات في مجلدات**:  
  ```
  /kafka-certs/
  ├── client/
  │   ├── client-keystore.jks
  │   └── client-truststore.jks
  └── broker/
      ├── broker-keystore.jks
      └── broker-truststore.jks
  ```

- **توثيق الأسماء**:  
  - أنشئ ملف `README.md` يشرح أسماء الشهادات ووظائفها.

---

### **7. خلاصة**  
- ✅ **KeyStore**: هو "محفظتك" (تحتوي على شهادتك + مفتاحك).  
- ✅ **TrustStore**: هو "قائمة الثقة" (تحتوي على شهادات الآخرين الذين تثق بهم).  
- ✅ **استخدم أسماء مميزة لكل شهادة** مثل `my-client-cert` و `trusted-broker-ca` لتجنب الخلط.